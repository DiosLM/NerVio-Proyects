//proyecto shoot em up, se va ha realizar por: 

#include <stdio.h>




/*Movimiento de la nave aun por corregir

//struc de la nave, punto x, punto y, el desplazamiento en x, desplazamiento en y, tamaño de la representacion de la nave;
struct TForm
{
  float Px;
  float Py;
  int despx=0;
  int despy=0;
  int Radio=20;
};

TForm Alfa;
//angulo 
float ang=0.0;
//aceleracion
float ace=0.0;
//numero pi
const float M_PI=3.14159265358979323846;

//declaracion de funciones
void DrawF(float min1, float max1, float min2, float max2);
void Rotar(float *x, float *y, float cx, float cy, float dangulo);


//rotar
void Rotar(float *x, float *y, float cx, float cy, float dangulo){
  float dx = *x - cx, dy = *y - cy, r = sqrt(dx*dx + dy*dy), a = atan2(dy, dx);
  a -= dangulo / 180 * M_PI;
  *x = cx + r*cos(a);
  *y = cy + r*sin(a);
}


// funcion de pintado de local a global
void DrawF(float min1, float max1, float min2, float max2){
 	int i;
  //puntos con valores entre 0 y 1
  float x[5]{0.2,0.8,0.2,0.8,0.2};
  float y[5]{0.2,0.2,0.8,0.8,0.2};
  float cx=0.5,cy=0.5;

  
  for (i = 0; i < 5; i++)
  {
    Rotar(&x[i],&y[i],cx,cy,ang);
    
  }

	for (i = 0; i < 4; i++)
	{

		ESAT::DrawLine(min1+(x[i]*(max1-min1)),min2+(y[i]*(max2-min2)),min1+(x[i+1]*(max1-min1)),min2+(y[i+1]*(max2-min2)));
	}
}

// todo esto hay que añadirlo en alguna funcion para guardarlo como libreria

  //esto va fuera del while de ventana
   srand(time(NULL));
   Alfa.Px=100+rand()%600;
   Alfa.Py=80+rand()%420;
 
 
  
   
   //esto va dentro del while de ventana

    //llamada a la funcion de pintado con los puntos de x e y + el desplazamiento + el tamaño
   DrawF(Alfa.Px+Alfa.Radio+Alfa.despx,Alfa.Px-Alfa.Radio+Alfa.despx,Alfa.Py-Alfa.Radio+Alfa.despy,Alfa.Py+Alfa.Radio+Alfa.despy);


    //desplazamiento aplicado con senos y cosenos * la aceleracion
    Alfa.despx +=cos(ang*2*M_PI/360)*ace;
    Alfa.despy +=sin(ang*2*M_PI/360)*ace;
    if(ace>0){
      ace-=0.15;
    }
    if (ace<0)
    {
      ace=0;
    }
    if ((Alfa.Py+Alfa.despy)<0)
      {
        Alfa.despy=0;
        Alfa.Py=599;
      }
       if ((Alfa.Py+Alfa.despy)>600)
      {
        Alfa.despy=0;
        Alfa.Py=1;
      }
      if ((Alfa.Px+Alfa.despx)<0)
      {
        Alfa.despx=0;
        Alfa.Px=799;
      }
      if ((Alfa.Px+Alfa.despx)>800)
      {
        Alfa.despx=0;
        Alfa.Px=1;
      }
       
      
    if(ESAT::IsKeyPressed('W')){
      if (ace<=10)
      {
        ace+=1;
      }
    }
    if(ESAT::IsKeyPressed('A')){
    ang-=1.8;
    }
    if(ESAT::IsKeyPressed('D')){
    ang+=1.8;
    }
    
   if(ESAT::IsSpecialKeyPressed(ESAT::kSpecialKey_Left)){
    ang-=1.8;
  
   }
   if(ESAT::IsSpecialKeyPressed(ESAT::kSpecialKey_Up)){
     if (ace<=10)
      {
        ace+=1;
      }
    
   }
   
   if(ESAT::IsSpecialKeyPressed(ESAT::kSpecialKey_Right)){
    ang+=1.8;
    
   }
    
*/



/* Funciones de disparo de IMANOL
-------------------------
struct TDisparo{  //Estructura del disparo, coordenada inicial del disparo y angulo es suficiente
  float x,y;      //
  float angulo;   //
}disparo[100];    //He declarado 100 estructuras para 100 balas
-------------------------
void dispara(float xi,float yi,float angulo){   // GENERAR BALA // xi,yi coord centrales locales de la nave   angulo, angulo de la nave
                                                //EN EL MOMENTO DE DIPARO
    if(disparo[tiro].x>800||disparo[tiro].x<0||disparo[tiro].y>600||disparo[tiro].y<0){ //Comprueba que la bala que toca no esta ya en
                                                                                        //pantalla, evitando que desaparezcan en trayecto
      disparo[tiro].x=xi+nave.posx[0]*nave.tam; //Le pasamos a la bala como x e y la zona desde donde se va a disparar
      disparo[tiro].y=yi+nave.posy[0]*nave.tam; //En mi caso, xi es el centro, por lo que le sumo la coord local y lo multiplico por el 
                                                //tamaño para conseguir el punto y que salga del sitio correcto
      disparo[tiro].angulo=nave.angulo;   //Le pasamos un angulo a la bala
    }
    tiro++; //Siguiente bala
}
-------------------------
void dibujadisparo(){   //Dibujar y calcular posiciones de bala
  float xi,yi;
  for(int i=0;i<100;i++){   //DIBUJAMOS TODAS LAS BALAS, DESDE LA 0 A LA 100
  //Tenemos un punto inicial de la bala, que la tenemos guardada en el struct correspondiente, el problema esta en guardar a donde
  //Se tiene que mover usando su angulo, la coordenada inicial, la llamaremos (x,y) usando el angulo consigue una coordenada secundaria
  //llamada (xi,yi), que esta a (en este caso) 5 pixels de distancia de la original en direccion al angulo. Usando el seno y el coseno
  //(los +90 -90 no se por que, pero sin ellos dispara a cuenca si apuntas a pamplona) conseguimios la coordenada contigua con el angulo
  //recordando que sin y cos funcionan con 1 de maximo, multiplicamos por el tamaño de disparo deseado, y le sumamos la coordenada original
  //por que sino todo disparo se realizaria alrededor del 0,0. Para acabar cambiamos el struct guardando la coordenada xi,yi como coordenada
  //principal para que el disparo continue
  
    xi=disparo[i].x+5*cos((disparo[i].angulo+90)*pi/180);
    yi=disparo[i].y+5*sin((disparo[i].angulo-90)*pi/180); //calcula posicion 2
    ESAT::DrawLine(disparo[i].x,disparo[i].y,xi,yi);  //dibuja disparo
    disparo[i].x=xi;
    disparo[i].y=yi;  //envia disparo a la siguiente coordenada
  }
}
-------------------------
if(ESAT::IsSpecialKeyDown(ESAT::kSpecialKey_Space)){  //Para el main, hace que la nave dispare
      dispara(nave.xc,nave.yc,nave.angulo);     //parametros: CENTRO de la nave en LOCAL(x,y), angulo de la nave
                                                //angulos (arriba=0,izquierda=90,abajo=180,derecha=270...) pueden ser positivos o negativos
                                                //los angulos pueden ir hasta el infinito
      if(tiro>=100){tiro=0;}    //Permite disparar 100 balas, al llegar a disparar la bala 100 se vuelve 0 para que se pueda disparar de nuevo
                                //la bala 0, tiro es una variable global
    }
-------------------------
*/  FIN DE DISPARO DE IMANOL
